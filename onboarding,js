// Onboarding JavaScript for LongChat
// Handles username generation and password input

class OnboardingManager {
    constructor() {
        this.currentUsername = null;
        this.currentPassword = null;
        this.isPasswordVisible = false;
        
        this.init();
    }

    init() {
        // Get DOM elements
        this.elements = {
            generateBtn: document.getElementById('generateUsernameBtn'),
            regenerateBtn: document.getElementById('regenerateBtn'),
            usernameDisplay: document.getElementById('generatedUsername'),
            passwordInput: document.getElementById('passwordInput'),
            togglePasswordBtn: document.getElementById('togglePassword'),
            continueBtn: document.getElementById('continueBtn'),
        };

        // Add event listeners
        this.setupEventListeners();
        
        // Check if user is returning (has existing data)
        this.checkExistingUser();
    }

    setupEventListeners() {
        // Username generation
        this.elements.generateBtn.addEventListener('click', () => this.generateUsername());
        this.elements.regenerateBtn.addEventListener('click', () => this.generateUsername());
        
        // Password handling
        this.elements.passwordInput.addEventListener('input', () => this.validateForm());
        this.elements.togglePasswordBtn.addEventListener('click', () => this.togglePasswordVisibility());
        
        // Form submission
        this.elements.continueBtn.addEventListener('click', () => this.proceedToChat());
        
        // Enter key handling
        this.elements.passwordInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !this.elements.continueBtn.disabled) {
                this.proceedToChat();
            }
        });
    }

    generateUsername() {
        // Show loading state
        this.showLoadingState();
        
        // Simulate generation delay for better UX
        setTimeout(() => {
            // Generate new username
            this.currentUsername = usernameGenerator.generateUsername();
            
            // Analyze username for special features
            const analysis = usernameGenerator.analyzeUsername(this.currentUsername);
            
            // Display the username
            this.displayUsername(this.currentUsername, analysis.isRare);
            
            // Show regenerate button and validate form
            this.elements.regenerateBtn.style.display = 'block';
            this.validateForm();
            
            // Show special notification for rare usernames
            if (analysis.isRare) {
                this.showRareUsernameNotification();
            }
        }, 500 + Math.random() * 1000); // Random delay between 500-1500ms
    }

    showLoadingState() {
        this.elements.usernameDisplay.innerHTML = `
            <span class="username-placeholder generating">Generating your unique username...</span>
        `;
        this.elements.generateBtn.disabled = true;
        this.elements.regenerateBtn.disabled = true;
    }

    displayUsername(username, isRare = false) {
        this.elements.usernameDisplay.innerHTML = `
            <span class="username-text ${isRare ? 'rare-username' : ''}">${username}</span>
        `;
        this.elements.usernameDisplay.classList.add('has-username');
        
        // Re-enable buttons
        this.elements.generateBtn.disabled = false;
        this.elements.regenerateBtn.disabled = false;
        
        // Hide initial generate button, show regenerate
        this.elements.generateBtn.style.display = 'none';
    }

    showRareUsernameNotification() {
        // Create and show notification for rare username
        const notification = document.createElement('div');
        notification.className = 'rare-notification';
        notification.innerHTML = `
            <div class="rare-content">
                ✨ <strong>Rare Username!</strong> You got a special username with the middle word "ahh"!
            </div>
        `;
        
        // Add styles
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #ffd700, #ffed4e);
            color: #1e3a2b;
            padding: 15px 20px;
            border-radius: 12px;
            font-weight: bold;
            z-index: 1000;
            box-shadow: 0 8px 25px rgba(255, 215, 0, 0.4);
            animation: slideInRight 0.5s ease, pulse 2s ease-in-out infinite;
            max-width: 300px;
        `;
        
        document.body.appendChild(notification);
        
        // Remove after 5 seconds
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 5000);
    }

    togglePasswordVisibility() {
        this.isPasswordVisible = !this.isPasswordVisible;
        
        if (this.isPasswordVisible) {
            this.elements.passwordInput.type = 'text';
            this.elements.togglePasswordBtn.textContent = '🙈';
        } else {
            this.elements.passwordInput.type = 'password';
            this.elements.togglePasswordBtn.textContent = '👁️';
        }
    }

    validateForm() {
        const hasUsername = this.currentUsername && this.currentUsername.trim().length > 0;
        const hasPassword = this.elements.passwordInput.value.trim().length >= 3;
        
        this.elements.continueBtn.disabled = !(hasUsername && hasPassword);
        
        // Update continue button text based on validation
        if (hasUsername && hasPassword) {
            this.elements.continueBtn.textContent = 'Continue to Chat';
        } else if (!hasUsername) {
            this.elements.continueBtn.textContent = 'Generate Username First';
        } else {
            this.elements.continueBtn.textContent = 'Enter Password (min 3 chars)';
        }
    }

    proceedToChat() {
        if (this.elements.continueBtn.disabled) return;
        
        // Get password
        this.currentPassword = this.elements.passwordInput.value.trim();
        
        // Save user data to localStorage
        this.saveUserData();
        
        // Show transition animation
        this.showTransition();
        
        // Redirect to main chat after animation
        setTimeout(() => {
            window.location.href = 'index.html';
        }, 1500);
    }

    saveUserData() {
        try {
            // Save to localStorage for the main chat app
            localStorage.setItem('chatApp_username', this.currentUsername);
            localStorage.setItem('chatApp_password', this.currentPassword);
            localStorage.setItem('chatApp_onboardingComplete', 'true');
            localStorage.setItem('chatApp_joinDate', new Date().toISOString());
            
            // Analyze and save username info
            const analysis = usernameGenerator.analyzeUsername(this.currentUsername);
            localStorage.setItem('chatApp_usernameAnalysis', JSON.stringify(analysis));
            
        } catch (error) {
            console.warn('Could not save user data:', error);
        }
    }

    showTransition() {
        // Create overlay
        const overlay = document.createElement('div');
        overlay.className = 'transition-overlay';
        overlay.innerHTML = `
            <div class="transition-content">
                <div class="loading-spinner"></div>
                <h2>Welcome, ${this.currentUsername}!</h2>
                <p>Taking you to LongChat...</p>
            </div>
        `;
        
        // Add styles
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #1e3a2b, #2d5a3d);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            animation: fadeIn 0.5s ease;
        `;
        
        document.body.appendChild(overlay);
    }

    checkExistingUser() {
        try {
            const hasCompletedOnboarding = localStorage.getItem('chatApp_onboardingComplete');
            const existingUsername = localStorage.getItem('chatApp_username');
            
            if (hasCompletedOnboarding && existingUsername) {
                // User has already completed onboarding, redirect to main app
                window.location.href = 'index.html';
                return;
            }
        } catch (error) {
            console.warn('Could not check existing user data:', error);
        }
    }
}

// Additional CSS for animations and rare username
const additionalStyles = document.createElement('style');
additionalStyles.textContent = `
    @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOutRight {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
    
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    .rare-username {
        background: linear-gradient(45deg, #ffd700, #ffed4e);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: shimmer 2s ease-in-out infinite;
    }
    
    @keyframes shimmer {
        0%, 100% { filter: brightness(1); }
        50% { filter: brightness(1.3); }
    }
    
    .transition-content {
        text-align: center;
        color: #a8d498;
    }
    
    .transition-content h2 {
        margin: 20px 0 10px;
        font-size: 28px;
    }
    
    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 4px solid rgba(125, 180, 108, 0.3);
        border-top: 4px solid #7db46c;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
`;

document.head.appendChild(additionalStyles);

// Initialize onboarding when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new OnboardingManager();
});